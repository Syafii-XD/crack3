# Budayakan Yang Sopan Tukang Recod
# https://www.github.com/Syafii-XD
# Time : Wed Sep 14 01:45:41 2022
# -------------------------------
_ = lambda __ : __import__('marshal').loads(__import__('base64').b64decode(__[::-1]));exec((_)(b''))